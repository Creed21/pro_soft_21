/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.form;

import database.ConnectionProperty;
import database.DbBroker;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Instruktor;
import server.MyServer;
import systeOper.LogInOperation;
import systeOper.SystemOperation;
import transferObject.TransferObject;

/**
 *
 * @author Filip
 */
public class FormMainServer extends javax.swing.JFrame {

    /**
     * My fields
     */
    private List<ConnectionProperty> connections;
    private ConnectionProperty connProperty;
    /**
     * Creates new form FormServerMain
     */
    public FormMainServer() {
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnStartServer = new javax.swing.JButton();
        brnCloseServer = new javax.swing.JButton();
        comboDB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStartServer.setText("start server");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        brnCloseServer.setText("closeServer");
        brnCloseServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnCloseServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboDB, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnStartServer)
                        .addGap(76, 76, 76)
                        .addComponent(brnCloseServer)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(comboDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartServer)
                    .addComponent(brnCloseServer))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartServerActionPerformed
        String choosenDB = ((String) comboDB.getSelectedItem()).split(" ")[1].trim();
        
        for(ConnectionProperty cp : connections) {
            if(cp.getDBName().equals(choosenDB)) {
                connProperty = cp;
            }
        }
        DbBroker broker = new DbBroker(connProperty);
        if(broker.openConnection())
            System.out.println("uspesna konekcija");
        Instruktor login = new Instruktor("aca", "a");
        TransferObject to = new TransferObject(login);
        LogInOperation operation = new LogInOperation();
        operation.setConnectionProperty(connProperty);
        
        System.out.println("system operation login, operation.logIn(to) = "+operation.logIn(to));
        System.out.println(to.getGenericObject());
//        operation.performSelect();
//        Instruktor i = (Instruktor) broker.logIn(login);
//        System.out.println(i);
        MyServer server = new MyServer(connProperty);
    }//GEN-LAST:event_btnStartServerActionPerformed

    private void brnCloseServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnCloseServerActionPerformed
        this.dispose();
    }//GEN-LAST:event_brnCloseServerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnCloseServer;
    private javax.swing.JButton btnStartServer;
    private javax.swing.JComboBox<String> comboDB;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        connections = new ArrayList<>();
        
        setVisible(true);
        setLocationRelativeTo(null);
        
        readConnectionProperties();
        populatecomboDB();
    }

    private void populatecomboDB() {
        int i = 1;
        for (ConnectionProperty cp : connections) {
            comboDB.addItem((i++) + ". " + cp.getDBName());
        }
    }

    private void readConnectionProperties() {
        try (BufferedReader br = new BufferedReader(new FileReader("config/db.config"));){
            String line = "";
            
            while (line != null) {
                ConnectionProperty mc = new ConnectionProperty();
                line = br.readLine(); // header delimiter #
                mc.setDBName(br.readLine().split("=")[1].trim()); // DB NAME
                mc.setDriver(br.readLine().split("=")[1].trim()); // DB Driver
                mc.setURL(br.readLine().split("=")[1].trim()); // DN URL
                mc.setUser(br.readLine().split("=")[1].trim()); // DB User
                mc.setPassword(br.readLine().split("=")[1].trim()); // DB Password
                line = br.readLine(); // footer delimiter #
                line = br.readLine(); // Connection delimiter new line
                
                connections.add(mc);
            }

            System.out.println("done reading db config");
            
//            System.out.println(connections.size());
//            System.out.println(connections);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormMainServer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormMainServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
